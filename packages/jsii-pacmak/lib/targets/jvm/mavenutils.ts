import xmlbuilder = require('xmlbuilder');
import logging = require('../../logging');
import spec = require('jsii-spec');
import path = require('path');
import fs = require('fs-extra');
import { PackageInfo } from '../../target';
import { VERSION_DESC } from '../../version';

export class JvmMavenUtils {
  public static toPackageInfos(assm: spec.Assembly): { [language: string]: PackageInfo } {
    const groupId = assm.targets!.java!.maven.groupId;
    const artifactId = assm.targets!.java!.maven.artifactId;
    const url = `https://repo1.maven.org/maven2/${groupId.replace(/\./g, '/')}/${artifactId}/${assm.version}/`;
    return {
      java: {
        repository: 'Maven Central', url,
        usage: {
          'Apache Maven': {
            language: 'xml',
            code: xmlbuilder.create({
              dependency: { groupId, artifactId, version: assm.version }
            }).end({ pretty: true }).replace(/<\?\s*xml(\s[^>]+)?>\s*/m, '')
          },
          'Apache Buildr': `'${groupId}:${artifactId}:jar:${assm.version}'`,
          'Apache Ivy': {
            language: 'xml',
            code: xmlbuilder.create({
              dependency: { '@groupId': groupId, '@name': artifactId, '@rev': assm.version }
            }).end({ pretty: true }).replace(/<\?\s*xml(\s[^>]+)?>\s*/m, '')
          },
          'Groovy Grape': `@Grapes(\n@Grab(group='${groupId}', module='${artifactId}', version='${assm.version}')\n)`,
          'Gradle / Grails': `compile '${groupId}:${artifactId}:${assm.version}'`,
        }
      }
    };
  }

  /**
   * Generates maven settings file for this build.
   * @param sourceDir The generated sources directory. This is where user.xml will be placed.
   * @param currentOutputDirectory The current output directory. Will be added as a local maven repo.
   */
  public static async generateMavenSettingsForLocalDeps(sourceDir: string, currentOutputDirectory: string, localRepos: string[]) {
    const filePath = path.join(sourceDir, 'user.xml');

    // add the current output directory as a local repo as well for the case
    // where we build multiple packages into the same output.
    localRepos.push(currentOutputDirectory);

    // if java-runtime is checked-out and we can find a local repository,
    // add it to the list.
    const localJavaRuntime = await this.findJavaRuntimeLocalRepository();
    if (localJavaRuntime) {
      localRepos.push(localJavaRuntime);
    }

    logging.debug('local maven repos:', localRepos);

    const profileName = 'local-jsii-modules';
    const settings = xmlbuilder.create({
      settings: {
        '@xmlns': 'http://maven.apache.org/POM/4.0.0',
        '@xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
        '@xsi:schemaLocation': 'http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd',
        '#comment': [
          `Generated by jsii-pacmak@${VERSION_DESC} on ${new Date().toISOString()}`,
        ],
        'profiles': {
          profile: {
            id: profileName,
            repositories: {
              repository: localRepos.map((repo, index) => ({
                id: `local${index}`,
                url: `file://${repo}`
              }))
            }
          }
        },
        'activeProfiles': {
          activeProfile: profileName
        }
      }
    }, { encoding: 'UTF-8' }).end({ pretty: true });

    logging.debug(`Generated ${filePath}`);
    await fs.writeFile(filePath, settings);
    return filePath;
  }

  /**
   * Looks up the `jsii-java-runtime` package from the local repository.
   * If it contains a "maven-repo" directory, it will be added as a local maven repo
   * so when we build locally, we build against it and not against the one published
   * to Maven Central.
   */
  private static findJavaRuntimeLocalRepository() {
    try {
      /* eslint-disable @typescript-eslint/no-var-requires */
      const javaRuntime = require('jsii-java-runtime');
      /* eslint-enable @typescript-eslint/no-var-requires */
      return javaRuntime.repository;
    } catch {
      return undefined;
    }
  }
}